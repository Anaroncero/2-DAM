<?xml version="1.0" encoding="UTF-8"?>

<!-- TODO barcode image properties -->

<configReference>

  <category key="net.sf.jasperreports.metadata.property.category:barcode">
  	<name>Barcode Component</name>
  </category>


  <!-- net.sf.jasperreports.components.barcode4j.image.antiAlias -->
  
  <configProperty name="net.sf.jasperreports.components.barcode4j.image.antiAlias">
    <description>
Flag property that specify the barcode image should use antialiasing. Default value is <code>true</code>.
   	</description>
  </configProperty>
  
  
  <!-- net.sf.jasperreports.components.barcode4j.image.gray -->
  
  <configProperty name="net.sf.jasperreports.components.barcode4j.image.gray">
    <description>
Flag property that specify the barcode image should use the gray color scheme. Default value is <code>true</code>.
   	</description>
  </configProperty>
  
  
  <!-- net.sf.jasperreports.components.barcode4j.image.producer.{alias} -->
  
  <configProperty name="net.sf.jasperreports.components.barcode4j.image.producer.{alias}">
    <description>
Property that determines which image producer implementation to be used for an alias associated 
with the barcode component element using the <a href="#net.sf.jasperreports.components.barcode4j.image.producer">net.sf.jasperreports.components.barcode4j.image.producer</a> 
property. 
<br/>
The value of this property represents the name of the class that implements the image 
producer interface for the specified alias. 
<br/>
Rendering the barcode in SVG format is registered under the <code>svg</code> alias and is used by default; 
the built-in property value for this alias is <code>net.sf.jasperreports.components.barcode4j.BarcodeSVGImageProducer</code>.
Rendering the barcode as rasterized is registered under the <code>image</code> alias and 
the built-in property value for this alias is <code>net.sf.jasperreports.components.barcode4j.BarcodeRasterizedImageProducer</code>.
<br/>
If the <code>svg</code> alias is set, the built-in SVG renderer is based on the Batik SVG library. 
Hence, this option introduces a dependency on Batik for viewing or exporting a report that includes 
barcodes.
<br/> 
The rasterized image producer draws the barcode on a PNG image which can be then 
displayed in the generated report. This producer uses further properties, set at the same 
levels as the image producer property, to allow the customization of the generated image.
<br/>
<br/>
<b>Note: </b>This property does not apply to QRCode barcodes which are generated based on a different library (ZXing). For 
QRCode barcodes, see <a href="#net.sf.jasperreports.components.barcode4j.qrcode.producer.{alias}">net.sf.jasperreports.components.barcode4j.qrcode.producer.{alias}</a>.
   	</description>
  </configProperty>
  
  
  <!-- net.sf.jasperreports.components.barcode4j.image.producer -->
  
  <configProperty name="net.sf.jasperreports.components.barcode4j.image.producer">
    <description>
Property that determines which image producer to be used for a barcode component element. The property can 
have a value of the name of the class that implements the image producer interface or an 
alias that has been set for such a class, using a property of the form 
<a href="#net.sf.jasperreports.components.barcode4j.image.producer.{alias}">net.sf.jasperreports.components.barcode4j.image.producer.{alias}</a>. 
<br/>
JasperReports provides two barcode image producer implementations: one which renders the 
barcode in SVG format and one which renders the barcode as a rasterized image. The 
first implementation is registered under the <code>svg</code> alias and is used by default; 
the second one has <code>image</code> as alias and can be used by changing the 
<a href="#net.sf.jasperreports.components.barcode4j.image.producer.{alias}">net.sf.jasperreports.components.barcode4j.image.producer.{alias}</a> 
property at any level. 
<br/>
The SVG barcode image producer uses the Barcode4J API to export the barcode to SVG, 
then it creates a SVG renderer based on the Batik SVG library. Hence, this option 
introduces a dependency on Batik for viewing or exporting a report that includes 
barcodes.
<br/> 
The rasterized image producer draws the barcode on a PNG image which can be then 
displayed in the generated report. This producer uses further properties, set at the same 
levels as the image producer property, to allow the customization of the generated image.
   	</description>
  </configProperty>
  
  
  <!-- net.sf.jasperreports.components.barcode4j.image.resolution -->
  
  <configProperty name="net.sf.jasperreports.components.barcode4j.image.resolution">
    <description>
Property that specify the barcode image resolution (ppi). Default value is 300.
   	</description>
  </configProperty>
  
  
  <!-- net.sf.jasperreports.components.barcode4j.qrcode.producer.{alias} -->
  
  <configProperty name="net.sf.jasperreports.components.barcode4j.qrcode.producer.{alias}">
    <description>
Property that determines which image producer implementation to be used for an alias associated 
with the QRCode component element using the <a href="#net.sf.jasperreports.components.barcode4j.image.producer">net.sf.jasperreports.components.barcode4j.image.producer</a> 
property. 
<br/>
The value of this property represents the name of the class that implements the image 
producer interface for the specified alias. 
<br/>
Rendering the QRCode component in SVG format is registered under the <code>svg</code> alias and is used by default; 
the built-in property value for this alias is <code>net.sf.jasperreports.barcode4j.QRCodeSVGImageProducer</code>.
Rendering the QRCode component as rasterized is registered under the <code>image</code> alias and 
the built-in property value for this alias is <code>net.sf.jasperreports.barcode4j.QRCodeRasterizedImageProducer</code>.
   	</description>
  </configProperty>
  
  
  <!-- net.sf.jasperreports.components.qrcode.character.encoding -->
  
  <configProperty name="net.sf.jasperreports.components.qrcode.character.encoding">
    <description>
Property that provides the character encoding to be used for QR code component elements.
    </description>
  </configProperty>
  
  
</configReference>
