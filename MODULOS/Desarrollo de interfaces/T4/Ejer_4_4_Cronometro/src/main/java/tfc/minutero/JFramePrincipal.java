/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tfc.minutero;

import com.formdev.flatlaf.FlatLightLaf;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.UIManager;

/**
 *
 * @author Ana Pastor
 */
public class JFramePrincipal extends javax.swing.JFrame {
    
    private int segundos = 0; // Variable para contar los segundos
    private Timer timer; // Timer para el cronómetro
    private boolean iniciar;
    private int si = 0 ;
    private int segsi = 0;
    private int minsi = 0;

    /**
     * Creates new form JFramePrincipal
     */
    public JFramePrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Crono = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        IniciarCrono = new javax.swing.JButton();
        ReiniciarCrono = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        SpinnerCuentaAtras = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        IniciarCuentaAtras = new javax.swing.JButton();
        ReiniciarCuentaAtras = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        IniciarAnalogico = new javax.swing.JButton();
        ReiniciarAnalogico = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 1));

        jPanel1.setLayout(new java.awt.GridLayout(3, 1));
        jPanel1.add(jLabel1);

        Crono.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Crono.setText("0");
        jPanel1.add(Crono);

        jPanel4.setLayout(new java.awt.GridLayout(1, 4, 20, 90));
        jPanel4.add(jLabel3);

        IniciarCrono.setText("Iniciar ");
        IniciarCrono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IniciarCronoActionPerformed(evt);
            }
        });
        jPanel4.add(IniciarCrono);

        ReiniciarCrono.setText("Reiniciar");
        ReiniciarCrono.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        ReiniciarCrono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReiniciarCronoActionPerformed(evt);
            }
        });
        jPanel4.add(ReiniciarCrono);
        jPanel4.add(jLabel4);

        jPanel1.add(jPanel4);

        jTabbedPane1.addTab("Cronómetro", jPanel1);

        jPanel2.setLayout(new java.awt.GridLayout(3, 1));
        jPanel2.add(jLabel5);

        jPanel5.setLayout(new java.awt.GridLayout(1, 0));
        jPanel5.add(jLabel6);

        SpinnerCuentaAtras.setToolTipText("");
        jPanel5.add(SpinnerCuentaAtras);
        jPanel5.add(jLabel7);

        jPanel2.add(jPanel5);

        jPanel6.setLayout(new java.awt.GridLayout(1, 4));
        jPanel6.add(jLabel8);

        IniciarCuentaAtras.setText("Iniciar");
        IniciarCuentaAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IniciarCuentaAtrasActionPerformed(evt);
            }
        });
        jPanel6.add(IniciarCuentaAtras);

        ReiniciarCuentaAtras.setText("Reiniciar");
        ReiniciarCuentaAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReiniciarCuentaAtrasActionPerformed(evt);
            }
        });
        jPanel6.add(ReiniciarCuentaAtras);
        jPanel6.add(jLabel9);

        jPanel2.add(jPanel6);

        jTabbedPane1.addTab("Cuenta Atrás", jPanel2);

        IniciarAnalogico.setText("Iniciar");
        IniciarAnalogico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IniciarAnalogicoActionPerformed(evt);
            }
        });

        ReiniciarAnalogico.setText("Reiniciar");
        ReiniciarAnalogico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReiniciarAnalogicoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(207, 207, 207)
                .addComponent(IniciarAnalogico)
                .addGap(96, 96, 96)
                .addComponent(ReiniciarAnalogico)
                .addContainerGap(231, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(292, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IniciarAnalogico)
                    .addComponent(ReiniciarAnalogico))
                .addGap(126, 126, 126))
        );

        jTabbedPane1.addTab("Reloj Analógico", jPanel3);

        getContentPane().add(jTabbedPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IniciarCronoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IniciarCronoActionPerformed
        // TODO add your handling code here:
          // Verifica si el cronómetro está corriendo
    if (timer == null) {
        // Inicia el cronómetro
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                segundos++;
                 Crono.setText(String.valueOf(segundos));
            }
        });
        timer.start();
        IniciarCrono.setText("Parar");
    } else {
        // Detiene el cronómetro
        timer.stop();
        timer = null;
        IniciarCrono.setText("Iniciar");
    }
        
    }//GEN-LAST:event_IniciarCronoActionPerformed

    private void ReiniciarCronoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReiniciarCronoActionPerformed
        // TODO add your handling code here:
        
        Crono.setText("0");
    }//GEN-LAST:event_ReiniciarCronoActionPerformed

    private void IniciarCuentaAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IniciarCuentaAtrasActionPerformed
        // Verifica si el cronómetro está corriendo
    if (timer == null) {
        // Obtiene el valor inicial del spinner
        segundos = (int) SpinnerCuentaAtras.getValue(); 

        // Inicia la cuenta atrás
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (segundos > 0) {
                    segundos--; // Decrementa el contador
                    SpinnerCuentaAtras.setValue(segundos); // Actualiza el valor del spinner
                } else {
                    timer.stop(); // Detiene el timer al llegar a 0
                    timer = null; // Resetea el timer
                    IniciarCuentaAtras.setText("Iniciar"); // Cambia el texto del botón
                }
            }
        });
        timer.start(); // Inicia el timer
        IniciarCuentaAtras.setText("Parar"); // Cambia el texto del botón a "Parar"
    } else {
        // Si el timer ya está corriendo, lo detiene
        timer.stop(); 
        timer = null; 
        IniciarCuentaAtras.setText("Iniciar"); // Cambia el texto del botón a "Iniciar"
    }
    }//GEN-LAST:event_IniciarCuentaAtrasActionPerformed

    private void ReiniciarCuentaAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReiniciarCuentaAtrasActionPerformed
        // TODO add your handling code here:
        SpinnerCuentaAtras.setValue(0);
    }//GEN-LAST:event_ReiniciarCuentaAtrasActionPerformed

    private void IniciarAnalogicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IniciarAnalogicoActionPerformed
        // TODO add your handling code here:
        
         if (!iniciar) {
            iniciar = true; // Cambia el estado a iniciado
            IniciarAnalogico.setText("Parar"); // Cambia el texto del botón a "Parar"

            // Crea un nuevo Timer que se ejecuta cada 1000 milisegundos (1 segundo)
            timer = new Timer(1000, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    // Si 'si' es menor que 359, incrementa la posición del segundero
                    if (si < 359) {
                        si += 6; // Incrementa 'si' en 6 grados (1 segundo)
                        repaint(); // Actualiza la visualización
                        segsi++; // Incrementa el contador de segundos
                       
                    } else {
                        // Si 'si' alcanza 360, reinicia los contadores
                        si = 0; // Reinicia la posición del segundero
                        segsi = 0; // Reinicia el contador de segundos
                        minsi++; // Incrementa el contador de minutos
                        
                    }
                }
            });
              timer.start(); // Inicia el Timer
        } else {
            iniciar = false; // Cambia el estado a detenido
            if (timer != null) {
                IniciarAnalogico.setText("Iniciar"); // Cambia el texto del botón a "Iniciar"
                timer.stop(); // Detiene el Timer
            }
        }
         
    }//GEN-LAST:event_IniciarAnalogicoActionPerformed

    private void ReiniciarAnalogicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReiniciarAnalogicoActionPerformed
        // TODO add your handling code here:
         //boton resetear segundero circular
        si = 0;
        minsi = 0;
    }//GEN-LAST:event_ReiniciarAnalogicoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
           
                  UIManager.setLookAndFeel(new FlatLightLaf());
                  
                   
                
            
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(JFramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } 

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFramePrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Crono;
    private javax.swing.JButton IniciarAnalogico;
    private javax.swing.JButton IniciarCrono;
    private javax.swing.JButton IniciarCuentaAtras;
    private javax.swing.JButton ReiniciarAnalogico;
    private javax.swing.JButton ReiniciarCrono;
    private javax.swing.JButton ReiniciarCuentaAtras;
    private javax.swing.JSpinner SpinnerCuentaAtras;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

  public void paint(Graphics g) {
        super.paint(g);

        g.setColor(new Color(0, 120, 255));
        g.fillArc(165, 80, 200, 200, 0, si);

    }



}

